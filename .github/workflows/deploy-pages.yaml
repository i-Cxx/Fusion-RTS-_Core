# .github/workflows/deploy-pages.yml
name: Deploy GitHub Pages

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  # Wenn du dein eigenes GIT_TOKEN verwendest, könntest du 'pages: write' entfernen,
  # aber es ist besser, es zu behalten und das GIT_TOKEN nur für spezifische Fälle zu nutzen.
  # Hier nur für die Demonstration, dass es ohne 'id-token' oder 'pages: write' ginge.
  # Wenn du ein PAT verwendest, musst du dem PAT die richtigen Scopes geben (z.B. repo).
  # pages: write
  # id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Hier wird das Token verwendet, um den Checkout mit höheren Berechtigungen durchzuführen.
          # Dies ist oft bei privaten Repositories oder Submodulen nötig.
          token: ${{ secrets.GIT_TOKEN }}

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: '.'

      - name: Custom Deploy (NOT RECOMMENDED for Pages, just for demo)
        if: success() # Only run if previous steps succeeded
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin "https://x-access-token:${{ secrets.GIT_TOKEN }}@github.com/${{ github.repository }}.git"
          # Beispiel: Dateien in den gh-pages Branch pushen
          git checkout -B gh-pages
          git add .
          git commit -m "Deploy to GitHub Pages" || echo "No changes to commit"
          git push origin gh-pages
